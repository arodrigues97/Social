{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Programming/Apps/social/app/src/utils/authentication.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n/**\n * This file is used for authentication related functions/constants.\n * @author Adam Rodrigues\n * @see AuthetnicatedRoute\n * https://stackoverflow.com/questions/43164554/how-to-implement-authenticated-routes-in-react-router-4\n */\n\n/**\n * The auth token identifier in the local storage\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AUTH_TOKEN = \"auth-token\";\n/**\n * Checks if the authentication token is set\n */\n\nfunction isAuthenticated() {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return token != null;\n}\n/**\n * Performs the authentication login task by setting the authentication tokens value.\n * @param {string} token\n */\n\n\nfunction login(token) {\n  localStorage.setItem(AUTH_TOKEN, token);\n  window.location.reload(false);\n}\n/**\n * Logs the user out by removing the authentication token.\n */\n\n\nfunction logout() {\n  localStorage.removeItem(AUTH_TOKEN);\n  window.location.reload(false);\n}\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  return (\n    /*#__PURE__*/\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    _jsxDEV(Route, { ...rest,\n      render: props => isAuthenticated() ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/signin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 56\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = PrivateRoute;\n\nconst PublicRoute = ({\n  component: Component,\n  restricted,\n  ...rest\n}) => {\n  return (\n    /*#__PURE__*/\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    _jsxDEV(Route, { ...rest,\n      render: props => isLogin() && restricted ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c2 = PublicRoute;\nexport { isAuthenticated, logout, login, PrivateRoute, PublicRoute };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PrivateRoute\");\n$RefreshReg$(_c2, \"PublicRoute\");","map":{"version":3,"sources":["/Users/adam/Programming/Apps/social/app/src/utils/authentication.js"],"names":["React","Route","Redirect","AUTH_TOKEN","isAuthenticated","token","localStorage","getItem","login","setItem","window","location","reload","logout","removeItem","PrivateRoute","component","Component","rest","props","PublicRoute","restricted","isLogin"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,OAAO,MAAMC,UAAU,GAAG,YAAnB;AAEP;AACA;AACA;;AACA,SAASC,eAAT,GAA2B;AACzB,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,UAArB,CAAd;AACA,SAAOE,KAAK,IAAI,IAAhB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAeH,KAAf,EAAsB;AACpBC,EAAAA,YAAY,CAACG,OAAb,CAAqBN,UAArB,EAAiCE,KAAjC;AACAK,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD;AAED;AACA;AACA;;;AACA,SAASC,MAAT,GAAkB;AAChBP,EAAAA,YAAY,CAACQ,UAAb,CAAwBX,UAAxB;AACAO,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD;;AAED,MAAMG,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC1D;AAAA;AACE;AACA;AACA,YAAC,KAAD,OACMA,IADN;AAEE,MAAA,MAAM,EAAGC,KAAD,IACNf,eAAe,kBAAK,QAAC,SAAD,OAAee;AAAf;AAAA;AAAA;AAAA;AAAA,cAAL,gBAAgC,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAHnD;AAAA;AAAA;AAAA;AAAA;AAHF;AAUD,CAXD;;KAAMJ,Y;;AAeN,MAAMK,WAAW,GAAG,CAAC;AAAEJ,EAAAA,SAAS,EAAEC,SAAb;AAAwBI,EAAAA,UAAxB;AAAoC,KAAGH;AAAvC,CAAD,KAAmD;AACrE;AAAA;AACE;AACA;AACA,YAAC,KAAD,OACMA,IADN;AAEE,MAAA,MAAM,EAAGC,KAAD,IACNG,OAAO,MAAMD,UAAb,gBACE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,gBAGE,QAAC,SAAD,OAAeF;AAAf;AAAA;AAAA;AAAA;AAAA;AANN;AAAA;AAAA;AAAA;AAAA;AAHF;AAcD,CAfD;;MAAMC,W;AAkBN,SAAShB,eAAT,EAA0BS,MAA1B,EAAkCL,KAAlC,EAAyCO,YAAzC,EAAuDK,WAAvD","sourcesContent":["import React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\n\n/**\n * This file is used for authentication related functions/constants.\n * @author Adam Rodrigues\n * @see AuthetnicatedRoute\n * https://stackoverflow.com/questions/43164554/how-to-implement-authenticated-routes-in-react-router-4\n */\n\n/**\n * The auth token identifier in the local storage\n */\nexport const AUTH_TOKEN = \"auth-token\"\n\n/**\n * Checks if the authentication token is set\n */\nfunction isAuthenticated() {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return token != null\n}\n\n/**\n * Performs the authentication login task by setting the authentication tokens value.\n * @param {string} token\n */\nfunction login(token) {\n  localStorage.setItem(AUTH_TOKEN, token)\n  window.location.reload(false)\n}\n\n/**\n * Logs the user out by removing the authentication token.\n */\nfunction logout() {\n  localStorage.removeItem(AUTH_TOKEN)\n  window.location.reload(false)\n}\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated() ? <Component {...props} /> : <Redirect to=\"/signin\" />\n      }\n    />\n  )\n}\n\n\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  return (\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    <Route\n      {...rest}\n      render={(props) =>\n        isLogin() && restricted ? (\n          <Redirect to=\"/dashboard\" />\n        ) : (\n          <Component {...props} />\n        )\n      }\n    />\n  )\n}\n\n\nexport { isAuthenticated, logout, login, PrivateRoute, PublicRoute }\n"]},"metadata":{},"sourceType":"module"}