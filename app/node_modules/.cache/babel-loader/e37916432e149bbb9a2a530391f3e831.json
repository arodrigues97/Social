{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Programming/Apps/social/app/src/components/Comments.js\",\n    _s = $RefreshSig$();\n\nimport Comment from \"./Comment\";\nimport { CardContent, makeStyles } from \"@material-ui/core\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_COMMENTS = gql`\n  query GetComments($postId: Int!) {\n    getComments(postId: $postId) {\n      id\n      comment\n      post {\n        id\n      }\n      user {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`;\n\nconst Comments = props => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_COMMENTS, {\n    errorPolicy: \"all\",\n    pollInterval: 0,\n    variables: {\n      comment: \"Comment\",\n      postId: parseInt(props.postId.replace(\"\"))\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    alert(JSON.stringify(error));\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Error..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"No comments!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CardContent, {\n    children: data.getComments.map(comment => {\n      return /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment.comment,\n        commenter: comment.user.firstName + \" \" + comment.user.lastName,\n        likes: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/adam/Programming/Apps/social/app/src/components/Comments.js"],"names":["Comment","CardContent","makeStyles","gql","useMutation","useQuery","GET_COMMENTS","Comments","props","loading","error","data","errorPolicy","pollInterval","variables","comment","postId","parseInt","replace","alert","JSON","stringify","getComments","map","user","firstName","lastName"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,mBAAxC;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,QAA3B,QAA2C,gBAA3C;;AAEA,MAAMC,YAAY,GAAGH,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAgBA,MAAMI,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACC,YAAD,EAAe;AACtDM,IAAAA,WAAW,EAAE,KADyC;AAEtDC,IAAAA,YAAY,EAAE,CAFwC;AAGtDC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,SADA;AAETC,MAAAA,MAAM,EAAEC,QAAQ,CAACT,KAAK,CAACQ,MAAN,CAAaE,OAAb,CAAqB,EAArB,CAAD;AAFP;AAH2C,GAAf,CAAzC;;AASA,MAAIT,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAIC,KAAJ,EAAW;AACTS,IAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeX,KAAf,CAAD,CAAL;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAI,CAACC,IAAL,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,WAAD;AAAA,cACGA,IAAI,CAACW,WAAL,CAAiBC,GAAjB,CAAsBR,OAAD,IAAa;AACjC,0BACE,QAAC,OAAD;AACE,QAAA,OAAO,EAAEA,OAAO,CAACA,OADnB;AAEE,QAAA,SAAS,EAAEA,OAAO,CAACS,IAAR,CAAaC,SAAb,GAAyB,GAAzB,GAA+BV,OAAO,CAACS,IAAR,CAAaE,QAFzD;AAGE,QAAA,KAAK,EAAE;AAHT;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAjCD;;GAAMnB,Q;UAC6BF,Q;;;KAD7BE,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import Comment from \"./Comment\"\nimport { CardContent, makeStyles } from \"@material-ui/core\"\nimport { gql, useMutation, useQuery } from \"@apollo/client\"\n\nconst GET_COMMENTS = gql`\n  query GetComments($postId: Int!) {\n    getComments(postId: $postId) {\n      id\n      comment\n      post {\n        id\n      }\n      user {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\nconst Comments = (props) => {\n  const { loading, error, data } = useQuery(GET_COMMENTS, {\n    errorPolicy: \"all\",\n    pollInterval: 0,\n    variables: {\n      comment: \"Comment\",\n      postId: parseInt(props.postId.replace(\"\")),\n    },\n  })\n\n  if (loading) {\n    return <span>Loading...</span>\n  }\n  if (error) {\n    alert(JSON.stringify(error))\n    return <span>Error..</span>\n  }\n  if (!data) {\n    return <span>No comments!</span>\n  }\n  return (\n    <CardContent>\n      {data.getComments.map((comment) => {\n        return (\n          <Comment\n            comment={comment.comment}\n            commenter={comment.user.firstName + \" \" + comment.user.lastName}\n            likes={0}\n          ></Comment>\n        )\n      })}\n    </CardContent>\n  )\n}\n\nexport default Comments\n"]},"metadata":{},"sourceType":"module"}