{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\nimport { AUTH_TOKEN } from \"./utils/authentication.js\";\n/**\n * The url at which the API server is hosted at.\n */\n\nconst API_ENDPOINT = \"http://localhost:4000\";\n/**\n * The HTTP link .\n */\n\nconst httpLink = createHttpLink({\n  uri: API_ENDPOINT\n});\n/**\n * The authentication link.\n */\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\n/**\n * The apollo client.\n */\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n  defaultOptions: {\n    query: {\n      errorPolicy: \"all\"\n    },\n    mutate: {\n      errorPolicy: \"all\"\n    },\n    watchQuery: {}\n  }\n});\nexport default client;","map":{"version":3,"sources":["/Users/adam/Programming/Apps/social/app/src/apollo.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","AUTH_TOKEN","API_ENDPOINT","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","connectToDevTools","defaultOptions","query","errorPolicy","mutate","watchQuery"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,uBAArB;AAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;AAAEK,EAAAA,GAAG,EAAEF;AAAP,CAAD,CAA/B;AAEA;AACA;AACA;;AACA,MAAMG,QAAQ,GAAGL,UAAU,CAAC,CAACM,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBT,UAArB,CAAd;AACA,SAAO;AACLM,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA;AACA;AACA;;AACA,MAAMI,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADwB;AAE9BY,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,EAFuB;AAG9BkB,EAAAA,iBAAiB,EAAE,IAHW;AAI9BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE;AADR,KADO;AAIdC,IAAAA,MAAM,EAAE;AACND,MAAAA,WAAW,EAAE;AADP,KAJM;AAOdE,IAAAA,UAAU,EAAE;AAPE;AAJc,CAAjB,CAAf;AAeA,eAAeT,MAAf","sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\"\nimport { setContext } from \"apollo-link-context\"\nimport { AUTH_TOKEN } from \"./utils/authentication.js\"\n\n/**\n * The url at which the API server is hosted at.\n */\nconst API_ENDPOINT = \"http://localhost:4000\"\n\n/**\n * The HTTP link .\n */\nconst httpLink = createHttpLink({ uri: API_ENDPOINT })\n\n/**\n * The authentication link.\n */\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  }\n})\n\n/**\n * The apollo client.\n */\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n  defaultOptions: {\n    query: {\n      errorPolicy: \"all\",\n    },\n    mutate: {\n      errorPolicy: \"all\",\n    },\n    watchQuery: {}\n  },\n})\n\nexport default client\n"]},"metadata":{},"sourceType":"module"}