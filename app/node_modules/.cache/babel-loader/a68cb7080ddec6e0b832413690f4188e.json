{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Programming/Apps/social/app/src/components/Post.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, CardActionArea, CardActions, CardContent, makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport Comments from \"./Comments\";\nimport { useState } from \"react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\n/**\n * The graphql mutation to add a comment.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ADD_COMMENT = gql`\n  mutation AddComment($comment: String!, $postId: Int!) {\n    addComment(comment: $comment, postId: $postId) {\n      id\n      comment\n      post {\n        id\n        post\n      }\n      user {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`;\n/**\n * The graphql query to get comments.\n */\n\nconst GET_COMMENTS = gql`\n  query GetComments($postId: Int!) {\n    getComments(postId: $postId) {\n      id\n      comment\n      post {\n        id\n      }\n      user {\n        id\n        firstName\n        lastName\n      }\n      likesCount\n    }\n  }\n`;\nconst LIKE_POST = gql`\nmutation LikePost($postId: Int!) {\n  likePost(postId: $postId) {\n    id\n  }\n}`;\n/**\n * The styling of a post.\n */\n\nconst useStyles = makeStyles(theme => ({\n  feed: {\n    margin: \"auto\",\n    marginTop: theme.spacing(4)\n  },\n  title: {\n    fontSize: 14,\n    marginTop: theme.spacing(2)\n  },\n  commentArea: {\n    display: \"block\"\n  },\n  postComment: {\n    marginTop: theme.spacing(2)\n  },\n  icon: {\n    margin: theme.spacing(1)\n  }\n}));\n/**\n * Represents a Post on the user interface.\n * @param {*} props The props passed into the component.\n * @returns The component Post.\n */\n\nconst Post = props => {\n  _s();\n\n  /**\n   * Represents the instance of the classes for styling.\n   */\n  const classes = useStyles();\n  /**\n   * Represents if the comment area is toggled.\n   */\n\n  const [commentsToggle, setCommentsToggle] = useState(false);\n  /**\n   * Represemts the comment value if responding to a post.\n   */\n\n  const [comment, setComment] = useState(\"\");\n  /**\n   * Represents the mutation hook for executing an add comment mutation.\n   */\n\n  const [addComment, {\n    error\n  }] = useMutation(ADD_COMMENT, {\n    onError({\n      error\n    }) {}\n\n  });\n  /**\n   * Represents the query hook for retreiving comments.\n   */\n\n  const {\n    loading,\n    error: getCommentsError,\n    data\n  } = useQuery(GET_COMMENTS, {\n    errorPolicy: \"all\",\n    pollInterval: 100,\n    variables: {\n      postId: parseInt(props.id)\n    },\n    fetchPolicy: \"cache-and-network\"\n  });\n  /**\n   * The method used to handle the change of input for typing a comment.\n   * @param {*} event The event executed.\n   */\n\n  const handleCommentChange = event => {\n    setComment(event.target.value);\n  };\n  /**\n   * The method used when the toggle button for comments is clicked.\n   * @param {*} event The event executed.\n   */\n\n\n  const handleCommentsClick = event => {\n    setCommentsToggle(!commentsToggle);\n  };\n  /**\n   * The method used when the add comment button is cllicked.\n   * @param {*} event\n   */\n\n\n  const handleAddComment = event => {\n    addComment({\n      variables: {\n        comment: comment,\n        postId: parseInt(props.id)\n      }\n    });\n    setComment(\"\");\n    setCommentsToggle(true);\n  };\n  /**\n   * TODO: clean up dispalying of errors.\n   */\n\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: JSON.stringify(error)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.feed,\n    variant: \"outlined\",\n    color: \"primary\",\n    children: [/*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        color: \"textSecondary\",\n        gutterBottom: true,\n        children: [\"Posted by: \", props.poster]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h3\",\n        variant: \"h6\",\n        children: props.post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), commentsToggle && data && data.getComments && data.getComments.length > 0 ? /*#__PURE__*/_jsxDEV(Comments, {\n      comments: data.getComments,\n      postId: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(CardActionArea, {\n      children: [/*#__PURE__*/_jsxDEV(CardActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          onClick: handleCommentsClick,\n          children: [/*#__PURE__*/_jsxDEV(ChatBubbleIcon, {\n            className: classes.icon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), \" (\", data ? data.getComments.length : \"0\", \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(ThumbUpIcon, {\n            className: classes.icon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), \"(\", props.likes, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        className: classes.commentArea,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          value: comment,\n          label: \"Add a comment\",\n          name: \"comment\",\n          size: \"small\",\n          variant: \"outlined\",\n          onChange: handleCommentChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.postComment,\n          onClick: handleAddComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Post, \"6yfGS8V203Z7nMZPX5u+4PSID+w=\", false, function () {\n  return [useStyles, useMutation, useQuery];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/adam/Programming/Apps/social/app/src/components/Post.js"],"names":["Button","Card","CardActionArea","CardActions","CardContent","makeStyles","TextField","Typography","Comments","useState","gql","useMutation","useQuery","ThumbUpIcon","ChatBubbleIcon","ADD_COMMENT","GET_COMMENTS","LIKE_POST","useStyles","theme","feed","margin","marginTop","spacing","title","fontSize","commentArea","display","postComment","icon","Post","props","classes","commentsToggle","setCommentsToggle","comment","setComment","addComment","error","onError","loading","getCommentsError","data","errorPolicy","pollInterval","variables","postId","parseInt","id","fetchPolicy","handleCommentChange","event","target","value","handleCommentsClick","handleAddComment","JSON","stringify","poster","post","getComments","length","likes"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  makeStyles,\n  TextField,\n  Typography,\n} from \"@material-ui/core\"\nimport Comments from \"./Comments\"\nimport { useState } from \"react\"\nimport { gql, useMutation, useQuery } from \"@apollo/client\"\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\"\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\"\n\n/**\n * The graphql mutation to add a comment.\n */\nconst ADD_COMMENT = gql`\n  mutation AddComment($comment: String!, $postId: Int!) {\n    addComment(comment: $comment, postId: $postId) {\n      id\n      comment\n      post {\n        id\n        post\n      }\n      user {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\n\n/**\n * The graphql query to get comments.\n */\nconst GET_COMMENTS = gql`\n  query GetComments($postId: Int!) {\n    getComments(postId: $postId) {\n      id\n      comment\n      post {\n        id\n      }\n      user {\n        id\n        firstName\n        lastName\n      }\n      likesCount\n    }\n  }\n`\n\nconst LIKE_POST = gql`\nmutation LikePost($postId: Int!) {\n  likePost(postId: $postId) {\n    id\n  }\n}`\n\n/**\n * The styling of a post.\n */\nconst useStyles = makeStyles((theme) => ({\n  feed: {\n    margin: \"auto\",\n    marginTop: theme.spacing(4),\n  },\n  title: {\n    fontSize: 14,\n    marginTop: theme.spacing(2),\n  },\n  commentArea: {\n    display: \"block\",\n  },\n  postComment: {\n    marginTop: theme.spacing(2),\n  },\n  icon: {\n    margin: theme.spacing(1),\n  },\n}))\n\n/**\n * Represents a Post on the user interface.\n * @param {*} props The props passed into the component.\n * @returns The component Post.\n */\nconst Post = (props) => {\n  /**\n   * Represents the instance of the classes for styling.\n   */\n  const classes = useStyles()\n\n  /**\n   * Represents if the comment area is toggled.\n   */\n  const [commentsToggle, setCommentsToggle] = useState(false)\n\n  /**\n   * Represemts the comment value if responding to a post.\n   */\n  const [comment, setComment] = useState(\"\")\n\n  /**\n   * Represents the mutation hook for executing an add comment mutation.\n   */\n  const [addComment, { error }] = useMutation(ADD_COMMENT, {\n    onError({ error }) {},\n  })\n\n  /**\n   * Represents the query hook for retreiving comments.\n   */\n  const { loading, error: getCommentsError, data } = useQuery(GET_COMMENTS, {\n    errorPolicy: \"all\",\n    pollInterval: 100,\n    variables: {\n      postId: parseInt(props.id),\n    },\n    fetchPolicy: \"cache-and-network\",\n  })\n\n  /**\n   * The method used to handle the change of input for typing a comment.\n   * @param {*} event The event executed.\n   */\n  const handleCommentChange = (event) => {\n    setComment(event.target.value)\n  }\n\n  /**\n   * The method used when the toggle button for comments is clicked.\n   * @param {*} event The event executed.\n   */\n  const handleCommentsClick = (event) => {\n    setCommentsToggle(!commentsToggle)\n  }\n\n  /**\n   * The method used when the add comment button is cllicked.\n   * @param {*} event\n   */\n  const handleAddComment = (event) => {\n    addComment({ variables: { comment: comment, postId: parseInt(props.id) } })\n    setComment(\"\")\n    setCommentsToggle(true)\n  }\n\n  /**\n   * TODO: clean up dispalying of errors.\n   */\n  if (error) {\n    return <span>{JSON.stringify(error)}</span>\n  }\n\n  return (\n    <Card className={classes.feed} variant=\"outlined\" color=\"primary\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Posted by: {props.poster}\n        </Typography>\n        <Typography component=\"h3\" variant=\"h6\">\n          {props.post}\n        </Typography>\n      </CardContent>\n\n      {commentsToggle &&\n      data &&\n      data.getComments &&\n      data.getComments.length > 0 ? (\n        <Comments comments={data.getComments} postId={props.id}></Comments>\n      ) : (\n        \"\"\n      )}\n      <CardActionArea>\n        <CardActions>\n          <Button size=\"small\" onClick={handleCommentsClick}>\n            <ChatBubbleIcon className={classes.icon} color=\"primary\" /> (\n            {data ? data.getComments.length : \"0\"})\n          </Button>\n          <Button size=\"small\">\n            <ThumbUpIcon className={classes.icon} color=\"primary\" />(\n            {props.likes})\n          </Button>\n        </CardActions>\n        <CardActions className={classes.commentArea}>\n          <TextField\n            fullWidth\n            value={comment}\n            label=\"Add a comment\"\n            name=\"comment\"\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={handleCommentChange}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.postComment}\n            onClick={handleAddComment}\n          >\n            Add Comment\n          </Button>\n        </CardActions>\n      </CardActionArea>\n    </Card>\n  )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}