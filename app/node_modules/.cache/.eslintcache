[{"/Users/adam/Programming/Apps/social/app/src/index.js":"1","/Users/adam/Programming/Apps/social/app/src/components/Navbar.js":"2","/Users/adam/Programming/Apps/social/app/src/login/Login.js":"3","/Users/adam/Programming/Apps/social/app/src/feed/FeedPage.js":"4","/Users/adam/Programming/Apps/social/app/src/components/Comment.js":"5","/Users/adam/Programming/Apps/social/app/src/components/Comments.js":"6","/Users/adam/Programming/Apps/social/app/src/register/Register.js":"7","/Users/adam/Programming/Apps/social/app/src/apollo.js":"8","/Users/adam/Programming/Apps/social/app/src/utils/authentication.js":"9","/Users/adam/Programming/Apps/social/app/src/components/App.js":"10","/Users/adam/Programming/Apps/social/app/src/feed/CreatePost.js":"11","/Users/adam/Programming/Apps/social/app/src/components/Post.js":"12"},{"size":561,"mtime":1615699997025,"results":"13","hashOfConfig":"14"},{"size":2977,"mtime":1615751239525,"results":"15","hashOfConfig":"14"},{"size":3524,"mtime":1615703460016,"results":"16","hashOfConfig":"14"},{"size":1903,"mtime":1615760523036,"results":"17","hashOfConfig":"14"},{"size":1032,"mtime":1615751327745,"results":"18","hashOfConfig":"14"},{"size":605,"mtime":1615754649455,"results":"19","hashOfConfig":"14"},{"size":2384,"mtime":1615584133445,"results":"20","hashOfConfig":"14"},{"size":915,"mtime":1615707729352,"results":"21","hashOfConfig":"14"},{"size":1946,"mtime":1615700132742,"results":"22","hashOfConfig":"14"},{"size":941,"mtime":1615700385870,"results":"23","hashOfConfig":"14"},{"size":2235,"mtime":1615709669525,"results":"24","hashOfConfig":"14"},{"size":6054,"mtime":1615770448873,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1o1hb8n",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/adam/Programming/Apps/social/app/src/index.js",[],["55","56"],"/Users/adam/Programming/Apps/social/app/src/components/Navbar.js",[],"/Users/adam/Programming/Apps/social/app/src/login/Login.js",[],"/Users/adam/Programming/Apps/social/app/src/feed/FeedPage.js",["57","58","59"],"import {\n  Card,\n  Container,\n  makeStyles,\n  CardContent,\n  Typography,\n  Portal,\n} from \"@material-ui/core\"\nimport Post from \"../components/Post\"\nimport CreatePost from \"./CreatePost\"\nimport { gql, useQuery } from \"@apollo/client\"\n\n/**\n * Represents the query to fetch for the feed.\n */\nexport const GET_FEED_QUERY = gql`\n  query {\n    getFeed {\n      id\n      post\n      user {\n        id\n        firstName\n        lastName\n      }\n      likes {\n        id\n        user {\n          id\n        }\n      }\n      likesCount\n      likedByUser\n    }\n  }\n`\n\n/**\n * Creates the styling of the feed page.\n */\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(4),\n  },\n}))\n\n/**\n * Creates the feed page component and handles the executing of the feed query.\n * @returns The feed page component.\n */\nconst FeedPage = () => {\n  /**\n   * The instance of the styling to use.\n   */\n  const classes = useStyles()\n\n  /**\n   * The query hook to fetch the feed.\n   * Temporarily using polling intervals to further investigate why the UI is not updating upon cache updating.\n   */\n  const { loading, error, data } = useQuery(GET_FEED_QUERY, {\n    errorPolicy: \"all\",\n    pollInterval: 100,\n    fetchPolicy: \"cache-and-network\",\n  })\n\n  return (\n    <Container className={classes.container} maxWidth=\"sm\">\n      <CreatePost />\n      {loading ? <Typography variant=\"h6\">Loading...</Typography> : \"\"}\n      {error ? <span>{JSON.stringify(error)}</span> : \"\"}\n      {data\n        ? data.getFeed.map((post, index) => {\n            return (\n              <Post\n                id={post.id}\n                poster={post.user.firstName + \" \" + post.user.lastName}\n                post={post.post}\n                likesCount={post.likesCount}\n                isLiked={post.likedByUser}\n              />\n            )\n          })\n        : \"\"}\n    </Container>\n  )\n}\n\nexport default FeedPage\n","/Users/adam/Programming/Apps/social/app/src/components/Comment.js",["60"],"import {\n  Card,\n  CardActions,\n  CardContent,\n  makeStyles,\n  Typography,\n  Box,\n  Button,\n  CardActionArea,\n} from \"@material-ui/core\"\n\n/**\n * Represents the styling of a Comment.\n */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n  },\n}))\n\n/**\n * Represents a comment under a Post.\n * @param {*} props The props passed.\n * @returns The component Comment.\n */\nconst Comment = (props) => {\n  /**\n   * The instance of the styles to use.\n   */\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Card variant=\"outlined\">\n        <CardContent>\n          <Box component=\"span\" fontWeight={500}>\n            {props.commenter}\n          </Box>\n          <p>{props.comment}</p>\n        </CardContent>\n        <CardActionArea>\n          <CardActions>\n            <Button size=\"small\">Reply</Button>\n            <Button size=\"small\">Like ({props.likes})</Button>\n          </CardActions>\n        </CardActionArea>\n      </Card>\n    </div>\n  )\n}\n\nexport default Comment\n","/Users/adam/Programming/Apps/social/app/src/components/Comments.js",[],"/Users/adam/Programming/Apps/social/app/src/register/Register.js",[],"/Users/adam/Programming/Apps/social/app/src/apollo.js",[],"/Users/adam/Programming/Apps/social/app/src/utils/authentication.js",[],"/Users/adam/Programming/Apps/social/app/src/components/App.js",["61","62"],"import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport Navbar from \"./Navbar\"\nimport Login from \"../login/Login\"\nimport FeedPage from \"../feed/FeedPage\"\nimport Register from \"../register/Register\"\nimport { PrivateRoute, PublicRoute } from \"../utils/authentication.js\"\n\n/**\n * Creates the App component.\n * @returns The app component.\n */\nfunction App() {\n  return (\n    <Router>\n      <header>\n        <Navbar />\n      </header>\n      <Switch>\n        <PublicRoute\n          restricted={false}\n          component={<div></div>}\n          path=\"/\"\n          exact\n        />\n        <PublicRoute\n          restricted={true}\n          component={Register}\n          path=\"/register\"\n          exact\n        />\n        <PublicRoute restricted={true} component={Login} path=\"/login\" exact />\n        <PrivateRoute component={FeedPage} path=\"/feed\" exact />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","/Users/adam/Programming/Apps/social/app/src/feed/CreatePost.js",["63"],"import {\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  TextField,\n} from \"@material-ui/core\"\n\nimport { useState } from \"react\"\nimport { gql, useMutation } from \"@apollo/client\"\n\n/**\n * The mutation used to create a post.\n */\nconst CREATE_POST_MUTATION = gql`\n  mutation CreatePost($post: String!) {\n    createPost(post: $post) {\n      id\n      post\n      user {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`\n/**\n * The component of creating a post. Handles the execution of the mutation against the graphql server.\n * @returns The component of creating a post.\n */\nconst CreatePost = () => {\n  /**\n   * The create post use mutation hook.\n   */\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    onError({ error }) {},\n    update(cache, { data: { createPost } }) {\n      cache.modify({\n        fields: {\n          post(exisistingPost = []) {\n            const newPostRef = cache.writeFragment({\n              data: createPost,\n              fragment: gql`\n                fragment NewPost on Post {\n                  id\n                  post\n                  user {\n                    id\n                    firstName\n                    lastName\n                  }\n                }\n              `,\n            })\n            return [...exisistingPost, newPostRef]\n          },\n        },\n      })\n    },\n  })\n\n  /**\n   * The typed post value in state.\n   */\n  const [post, setPost] = useState(\"\")\n\n  /**\n   * The interaction when creating a post.\n   */\n  function handlePost() {\n    createPost({\n      variables: { post: post },\n    })\n    setPost(\"\")\n  }\n\n  return (\n    <div>\n      <Card>\n        <CardContent>\n          <TextField\n            multiline\n            rows={2}\n            rowsMax={12}\n            fullWidth\n            helperText={\"What's on your mind?\"}\n            value={post}\n            onChange={(e) => setPost(e.target.value)}\n          />\n        </CardContent>\n        <CardActionArea>\n          <CardActions>\n            <Button variant=\"contained\" color=\"primary\" onClick={handlePost}>\n              Post\n            </Button>\n          </CardActions>\n        </CardActionArea>\n      </Card>\n    </div>\n  )\n}\n\nexport default CreatePost\n","/Users/adam/Programming/Apps/social/app/src/components/Post.js",["64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":3,"nodeType":"72","messageId":"73","endLine":2,"endColumn":7},{"ruleId":"70","severity":1,"message":"74","line":5,"column":3,"nodeType":"72","messageId":"73","endLine":5,"endColumn":14},{"ruleId":"70","severity":1,"message":"75","line":7,"column":3,"nodeType":"72","messageId":"73","endLine":7,"endColumn":9},{"ruleId":"70","severity":1,"message":"76","line":6,"column":3,"nodeType":"72","messageId":"73","endLine":6,"endColumn":13},{"ruleId":"70","severity":1,"message":"77","line":1,"column":43,"nodeType":"72","messageId":"73","endLine":1,"endColumn":48},{"ruleId":"70","severity":1,"message":"78","line":1,"column":50,"nodeType":"72","messageId":"73","endLine":1,"endColumn":54},{"ruleId":"70","severity":1,"message":"79","line":37,"column":24,"nodeType":"72","messageId":"73","endLine":37,"endColumn":29},{"ruleId":"70","severity":1,"message":"80","line":154,"column":11,"nodeType":"72","messageId":"73","endLine":154,"endColumn":18},{"ruleId":"70","severity":1,"message":"81","line":154,"column":27,"nodeType":"72","messageId":"73","endLine":154,"endColumn":43},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'CardContent' is defined but never used.","'Portal' is defined but never used.","'Typography' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'getCommentsError' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]