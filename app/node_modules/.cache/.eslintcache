[{"/Users/adam/Programming/Apps/social/app/src/index.js":"1","/Users/adam/Programming/Apps/social/app/src/components/Navbar.js":"2","/Users/adam/Programming/Apps/social/app/src/login/Login.js":"3","/Users/adam/Programming/Apps/social/app/src/register/Register.js":"4","/Users/adam/Programming/Apps/social/app/src/apollo.js":"5","/Users/adam/Programming/Apps/social/app/src/utils/authentication.js":"6","/Users/adam/Programming/Apps/social/app/src/components/App.js":"7","/Users/adam/Programming/Apps/social/app/src/register/registerMutation.js":"8","/Users/adam/Programming/Apps/social/app/src/feed/getFeedQuery.js":"9","/Users/adam/Programming/Apps/social/app/src/components/post/Post.js":"10","/Users/adam/Programming/Apps/social/app/src/components/post/toggleLikeMutation.js":"11","/Users/adam/Programming/Apps/social/app/src/components/comment/addCommentMutation.js":"12","/Users/adam/Programming/Apps/social/app/src/components/comment/getCommentsQuery.js":"13","/Users/adam/Programming/Apps/social/app/src/components/comment/Comments.js":"14","/Users/adam/Programming/Apps/social/app/src/components/comment/Comment.js":"15","/Users/adam/Programming/Apps/social/app/src/components/post/CreatePost.js":"16","/Users/adam/Programming/Apps/social/app/src/components/post/createPostMutation.js":"17","/Users/adam/Programming/Apps/social/app/src/profile/ProfilePage.js":"18","/Users/adam/Programming/Apps/social/app/src/components/profile/ProfilePosts.js":"19","/Users/adam/Programming/Apps/social/app/src/components/post/PostList.js":"20","/Users/adam/Programming/Apps/social/app/src/components/profile/getProfilePosts.js":"21","/Users/adam/Programming/Apps/social/app/src/components/comment/AddComment.js":"22","/Users/adam/Programming/Apps/social/app/src/components/comment/getRepliesQuery.js":"23","/Users/adam/Programming/Apps/social/app/src/home/HomePage.js":"24","/Users/adam/Programming/Apps/social/app/src/user/getUserQuery.js":"25","/Users/adam/Programming/Apps/social/app/src/user/UserProvider.js":"26","/Users/adam/Programming/Apps/social/app/src/user/userContext.js":"27","/Users/adam/Programming/Apps/social/app/src/feed/FeedContainer.js":"28"},{"size":582,"mtime":1615839554539,"results":"29","hashOfConfig":"30"},{"size":4148,"mtime":1616307217907,"results":"31","hashOfConfig":"30"},{"size":3524,"mtime":1615703460016,"results":"32","hashOfConfig":"30"},{"size":5294,"mtime":1615837511550,"results":"33","hashOfConfig":"30"},{"size":1287,"mtime":1616311282419,"results":"34","hashOfConfig":"30"},{"size":1946,"mtime":1615700132742,"results":"35","hashOfConfig":"30"},{"size":1616,"mtime":1616308398894,"results":"36","hashOfConfig":"30"},{"size":480,"mtime":1615836578477,"results":"37","hashOfConfig":"30"},{"size":428,"mtime":1616023795245,"results":"38","hashOfConfig":"30"},{"size":3440,"mtime":1616023436522,"results":"39","hashOfConfig":"30"},{"size":476,"mtime":1615843789413,"results":"40","hashOfConfig":"30"},{"size":476,"mtime":1616112867755,"results":"41","hashOfConfig":"30"},{"size":433,"mtime":1616022412667,"results":"42","hashOfConfig":"30"},{"size":708,"mtime":1616020102004,"results":"43","hashOfConfig":"30"},{"size":3025,"mtime":1616113336260,"results":"44","hashOfConfig":"30"},{"size":2682,"mtime":1616311207324,"results":"45","hashOfConfig":"30"},{"size":393,"mtime":1616304186357,"results":"46","hashOfConfig":"30"},{"size":1857,"mtime":1616303591256,"results":"47","hashOfConfig":"30"},{"size":487,"mtime":1615943659864,"results":"48","hashOfConfig":"30"},{"size":767,"mtime":1616311045357,"results":"49","hashOfConfig":"30"},{"size":407,"mtime":1616023873716,"results":"50","hashOfConfig":"30"},{"size":2460,"mtime":1616113219525,"results":"51","hashOfConfig":"30"},{"size":391,"mtime":1616022532067,"results":"52","hashOfConfig":"30"},{"size":73,"mtime":1616114716000,"results":"53","hashOfConfig":"30"},{"size":180,"mtime":1616307184051,"results":"54","hashOfConfig":"30"},{"size":639,"mtime":1616310920976,"results":"55","hashOfConfig":"30"},{"size":115,"mtime":1616303217953,"results":"56","hashOfConfig":"30"},{"size":1602,"mtime":1616310675765,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1o1hb8n",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/adam/Programming/Apps/social/app/src/index.js",[],["120","121"],"/Users/adam/Programming/Apps/social/app/src/components/Navbar.js",[],"/Users/adam/Programming/Apps/social/app/src/login/Login.js",[],"/Users/adam/Programming/Apps/social/app/src/register/Register.js",["122","123"],"import {\n  Button,\n  Container,\n  Grid,\n  makeStyles,\n  TextField,\n  Typography,\n} from \"@material-ui/core\"\nimport { Alert } from \"@material-ui/lab\"\nimport { useMutation } from \"@apollo/client\"\nimport REGISTER from \"./registerMutation\"\nimport { useState } from \"react\"\nimport { useHistory } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n/**\n * The styles to use for the Register page.\n */\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(8),\n  },\n  title: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\n/**\n * Represents the Register page.\n * @author Adam Rodrigues\n * @returns The Register component.\n */\nconst Register = () => {\n  /**\n   * The mutation hook used to execute a register mutation.\n   */\n  const [register, { loading, error }] = useMutation(REGISTER, {\n    onCompleted({ register }) {\n      if (register) {\n        setHasRegistered(true)\n      }\n    },\n    onError({ error }) {\n      setHasRegistered(false)\n    },\n  })\n\n  /**\n   * The first name reference stored in state.\n   */\n  const [firstName, setFirstName] = useState(\"\")\n\n  /**\n   * The last name reference stored in state.\n   */\n  const [lastName, setLastName] = useState(\"\")\n\n  /**\n   * The email reference stored in state.\n   */\n  const [email, setEmail] = useState(\"\")\n\n  /**\n   * The password reference stored in state.\n   */\n  const [password, setPassword] = useState(\"\")\n\n  /**\n   * The password repeat reference stored in state.\n   */\n  const [passwordRepeat, setPasswordRepeat] = useState(\"\")\n\n  /**\n   *\n   */\n  const [hasRegistered, setHasRegistered] = useState(false)\n\n  /**\n   * The instance of the styles to use for the register page.\n   */\n  const classes = useStyles()\n\n  /**\n   * The reference to history.\n   */\n  const history = useHistory()\n\n  /**\n   * The method used when the register button is clicked.\n   */\n  function handleRegister() {\n    register({\n      variables: {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password,\n        passwordRepeat: passwordRepeat,\n      },\n    })\n  }\n\n  return (\n    <Container className={classes.container} maxWidth=\"xs\">\n      <Typography className={classes.title} component=\"h1\" variant=\"h5\">\n        Register\n      </Typography>\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"First Name\"\n                  name=\"first-name\"\n                  size=\"small\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Last Name\"\n                  name=\"last-name\"\n                  size=\"small\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  onChange={(e) => setLastName(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  name=\"email\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Password\"\n                  name=\"password\"\n                  size=\"small\"\n                  type=\"password\"\n                  variant=\"outlined\"\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Repeat Password\"\n                  name=\"password-repeat\"\n                  size=\"small\"\n                  type=\"password\"\n                  variant=\"outlined\"\n                  onChange={(e) => setPasswordRepeat(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n              onClick={handleRegister}\n            >\n              Register\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            {hasRegistered ? (\n              <Alert severity=\"success\">\n                You have successfully registered - good job! You can login by\n                clicking <Link to=\"/login\">here</Link>\n              </Alert>\n            ) : (\n              \"\"\n            )}\n            {error ? (\n              <Alert severity=\"error\">\n                {error.graphQLErrors.map(({ message }) => {\n                  return <span>{message}</span>\n                })}\n                {error.networkError\n                  ? \"Sorry, we are uanble to complete the request at this time.\"\n                  : \"\"}\n              </Alert>\n            ) : (\n              \"\"\n            )}\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  )\n}\n\nexport default Register\n","/Users/adam/Programming/Apps/social/app/src/apollo.js",["124"],"import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\"\nimport { FastRewind } from \"@material-ui/icons\"\nimport { setContext } from \"apollo-link-context\"\nimport { AUTH_TOKEN } from \"./utils/authentication.js\"\n\n/**\n * The url at which the API server is hosted at.\n */\nconst API_ENDPOINT = \"http://localhost:4000\"\n\n/**\n * The HTTP link .\n */\nconst httpLink = createHttpLink({ uri: API_ENDPOINT })\n\n/**\n * The authentication link.\n */\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  }\n})\n\n/**\n * The apollo client.\n */\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    /*typePolicies: {\n      Query: {\n        fields: {\n          getFeed: {\n            keyArgs: false,\n            merge(existing = [], incoming) {\n              return [...existing, ...incoming]\n            },\n          },\n        },\n      },\n    },*/\n  }),\n  connectToDevTools: true,\n  defaultOptions: {\n    query: {\n      errorPolicy: \"all\",\n    },\n    mutate: {\n      errorPolicy: \"all\",\n    },\n    watchQuery: {\n      fetchPolicy: \"cache-and-network\",\n    },\n  },\n})\n\nexport default client\n","/Users/adam/Programming/Apps/social/app/src/utils/authentication.js",[],"/Users/adam/Programming/Apps/social/app/src/components/App.js",[],"/Users/adam/Programming/Apps/social/app/src/register/registerMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/feed/getFeedQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/Post.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/toggleLikeMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/addCommentMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/getCommentsQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/Comments.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/Comment.js",["125","126","127"],"import { useLazyQuery, useQuery } from \"@apollo/client\"\nimport {\n  Card,\n  CardActions,\n  CardHeader,\n  Avatar,\n  CardContent,\n  makeStyles,\n  Box,\n  Button,\n  CardActionArea,\n} from \"@material-ui/core\"\nimport { useEffect, useState } from \"react\"\nimport AddComment from \"./AddComment\"\nimport GET_REPLIES from \"./getRepliesQuery\"\n\n/**\n * Represents the styling of a Comment.\n */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n  },\n}))\n\n/**\n * Represents a comment under a Post.\n * @param {*} props The props passed.\n * @returns The component Comment.\n */\nconst Comment = (props) => {\n  /**\n   * The instance of the styles to use.\n   */\n  const classes = useStyles()\n\n  /**\n   * The repy toggle.\n   */\n  const [replyToggle, setReplyToggle] = useState(false)\n\n  /**\n   * The query hook used to retrieve the replies.\n   */\n  const { data } = useQuery(GET_REPLIES, {\n    pollInterval: 100,\n    variables: { commentId: parseInt(props.id) },\n  })\n\n  /**\n   * Loads the comment replies.\n   *\n  useEffect(() => {\n    replyComments({ variables: { commentId: parseInt(props.id) } })\n  }, [])*/\n\n  /**\n   * Handles the replies being toggled.\n   */\n  function handleReplyToggle() {\n    setReplyToggle(!replyToggle)\n  }\n\n  /**\n   * The styling to aplly for a reply.\n   */\n  let replyToStyle = {\n    margin: \"2rem\",\n  }\n\n  return (\n    <div className={classes.root}>\n      <Card variant=\"outlined\" style={props.replyTo ? replyToStyle : {}}>\n        <CardHeader\n          title={props.commenter}\n          className={classes.cardHeader}\n          avatar={\n            <Avatar src=\"https://material-ui.com/static/images/avatar/1.jpg\"></Avatar>\n          }\n        ></CardHeader>\n        <CardContent>\n          <Box component=\"span\" fontWeight={500}>\n            {props.commenter}\n          </Box>\n          <p>{props.comment}</p>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" onClick={handleReplyToggle}>\n            Reply\n          </Button>\n          <Button size=\"small\">Like ({props.likes})</Button>\n        </CardActions>\n        {replyToggle ? (\n          <AddComment\n            postId={props.postId}\n            replyCommentId={props.id}\n          ></AddComment>\n        ) : (\n          \"\"\n        )}\n\n        <div className=\"replies\">\n          {data && data.getReplies\n            ? data.getReplies.map((reply) => {\n                return (\n                  <div>\n                    <Comment\n                      id={reply.id}\n                      postId={reply.post.id}\n                      commenter={\n                        reply.user.firstName + \" \" + reply.user.lastName\n                      }\n                      comment={reply.comment}\n                      likes={reply.likesCount}\n                      replyTo={true}\n                      replies={reply.replies}\n                    ></Comment>\n                  </div>\n                )\n              })\n            : \"\"}\n        </div>\n      </Card>\n    </div>\n  )\n}\n\nexport default Comment\n","/Users/adam/Programming/Apps/social/app/src/components/post/CreatePost.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/createPostMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/profile/ProfilePage.js",[],"/Users/adam/Programming/Apps/social/app/src/components/profile/ProfilePosts.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/PostList.js",["128"],"import { LinearProgress, makeStyles } from \"@material-ui/core\"\nimport Post from \"./Post\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"0\",\n    listStyle: \"none\",\n  },\n}))\n\nconst PostList = (props) => {\n  let classes = useStyles()\n  let posts = props.posts\n  return (\n    <ul className={classes.root}>\n      {posts.map((post) => {\n        return (\n          <li key={post.id}>\n            <Post\n              id={post.id}\n              poster={post.user.firstName + \" \" + post.user.lastName}\n              post={post.post}\n              likesCount={post.likesCount}\n              isLiked={post.likedByUser}\n              commentCount={post.commentCount}\n            />\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nexport default PostList\n","/Users/adam/Programming/Apps/social/app/src/components/profile/getProfilePosts.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/AddComment.js",["129"],"import { Button, CardActions, TextField } from \"@material-ui/core\"\nimport { useState } from \"react\"\nimport { useMutation } from \"@apollo/client\"\nimport { makeStyles } from \"@material-ui/core\"\nimport ADD_COMMENT from \"../comment/addCommentMutation\"\nimport GET_COMMENTS from \"../comment/getCommentsQuery\"\nimport GET_REPLIES from \"./getRepliesQuery\"\n\n/**\n * The styling of a post.\n */\nconst useStyles = makeStyles((theme) => ({\n  postComment: {\n    marginTop: theme.spacing(2),\n  },\n  commentArea: {\n    display: \"block\",\n  },\n}))\n\n/**\n * Represents the \"Add Comment\" area of the UI.\n * @param {*} props The props to pass.\n * @returns The AddComment component.\n */\nconst AddComment = (props) => {\n  /**\n   * Represents the instance of the classes for styling.\n   */\n  const classes = useStyles()\n\n  /**\n   * Represemts the comment value if responding to a post.\n   */\n  const [comment, setComment] = useState(\"\")\n\n  /**\n   * Represents the mutation hook for executing an add comment mutation.\n   */\n  const [addComment] = useMutation(ADD_COMMENT, {\n    refetchQueries: [\n      { query: GET_COMMENTS, variables: { postId: parseInt(props.postId) } },\n      /*\n      //TODO: conditionally fetch this...\n         {\n        query: GET_REPLIES,\n        variables: { commentId: parseInt(props.replyCommentId) },\n      },*/\n    ],\n    onError({ error }) {\n      console.log(\"Error=\" + JSON.stringify(error))\n    },\n  })\n\n  /**\n   * The method used when the add comment button is cllicked.\n   * @param {*} event\n   */\n  const handleAddComment = (event) => {\n    addComment({\n      variables: {\n        comment: comment,\n        postId: parseInt(props.postId),\n        replyCommentId: parseInt(props.replyCommentId),\n      },\n    })\n    setComment(\"\")\n  }\n\n  /**\n   * The method used to handle the change of input for typing a comment.\n   * @param {*} event The event executed.\n   */\n  const handleCommentChange = (event) => {\n    setComment(event.target.value)\n  }\n\n  return (\n    <CardActions className={classes.commentArea}>\n      <TextField\n        fullWidth\n        value={comment}\n        label=\"Add a comment\"\n        name=\"comment\"\n        size=\"small\"\n        variant=\"outlined\"\n        onChange={handleCommentChange}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.postComment}\n        onClick={handleAddComment}\n      >\n        Add Comment\n      </Button>\n    </CardActions>\n  )\n}\n\nexport default AddComment\n","/Users/adam/Programming/Apps/social/app/src/components/comment/getRepliesQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/home/HomePage.js",[],"/Users/adam/Programming/Apps/social/app/src/user/getUserQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/user/UserProvider.js",["130","131","132","133"],"/Users/adam/Programming/Apps/social/app/src/user/userContext.js",[],"/Users/adam/Programming/Apps/social/app/src/feed/FeedContainer.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":37,"column":22,"nodeType":"140","messageId":"141","endLine":37,"endColumn":29},{"ruleId":"138","severity":1,"message":"142","line":86,"column":9,"nodeType":"140","messageId":"141","endLine":86,"endColumn":16},{"ruleId":"138","severity":1,"message":"143","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":20},{"ruleId":"138","severity":1,"message":"144","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":22},{"ruleId":"138","severity":1,"message":"145","line":11,"column":3,"nodeType":"140","messageId":"141","endLine":11,"endColumn":17},{"ruleId":"138","severity":1,"message":"146","line":13,"column":10,"nodeType":"140","messageId":"141","endLine":13,"endColumn":19},{"ruleId":"138","severity":1,"message":"147","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":24},{"ruleId":"138","severity":1,"message":"148","line":7,"column":8,"nodeType":"140","messageId":"141","endLine":7,"endColumn":19},{"ruleId":"138","severity":1,"message":"144","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":22},{"ruleId":"138","severity":1,"message":"146","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":19},{"ruleId":"138","severity":1,"message":"149","line":7,"column":10,"nodeType":"140","messageId":"141","endLine":7,"endColumn":18},{"ruleId":"138","severity":1,"message":"150","line":8,"column":11,"nodeType":"140","messageId":"141","endLine":8,"endColumn":16},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'FastRewind' is defined but never used.","'useLazyQuery' is defined but never used.","'CardActionArea' is defined but never used.","'useEffect' is defined but never used.","'LinearProgress' is defined but never used.","'GET_REPLIES' is defined but never used.","'userData' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]