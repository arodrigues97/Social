[{"/Users/adam/Programming/Apps/social/app/src/index.js":"1","/Users/adam/Programming/Apps/social/app/src/components/Navbar.js":"2","/Users/adam/Programming/Apps/social/app/src/login/Login.js":"3","/Users/adam/Programming/Apps/social/app/src/feed/FeedPage.js":"4","/Users/adam/Programming/Apps/social/app/src/register/Register.js":"5","/Users/adam/Programming/Apps/social/app/src/apollo.js":"6","/Users/adam/Programming/Apps/social/app/src/utils/authentication.js":"7","/Users/adam/Programming/Apps/social/app/src/components/App.js":"8","/Users/adam/Programming/Apps/social/app/src/register/registerMutation.js":"9","/Users/adam/Programming/Apps/social/app/src/feed/getFeedQuery.js":"10","/Users/adam/Programming/Apps/social/app/src/components/post/Post.js":"11","/Users/adam/Programming/Apps/social/app/src/components/post/toggleLikeMutation.js":"12","/Users/adam/Programming/Apps/social/app/src/components/comment/addCommentMutation.js":"13","/Users/adam/Programming/Apps/social/app/src/components/comment/getCommentsQuery.js":"14","/Users/adam/Programming/Apps/social/app/src/components/comment/Comments.js":"15","/Users/adam/Programming/Apps/social/app/src/components/comment/Comment.js":"16","/Users/adam/Programming/Apps/social/app/src/components/post/CreatePost.js":"17","/Users/adam/Programming/Apps/social/app/src/components/post/createPostMutation.js":"18","/Users/adam/Programming/Apps/social/app/src/feed/getUserQuery.js":"19","/Users/adam/Programming/Apps/social/app/src/profile/ProfilePage.js":"20","/Users/adam/Programming/Apps/social/app/src/components/profile/ProfilePosts.js":"21","/Users/adam/Programming/Apps/social/app/src/components/post/PostList.js":"22","/Users/adam/Programming/Apps/social/app/src/components/profile/getProfilePosts.js":"23","/Users/adam/Programming/Apps/social/app/src/components/comment/AddComment.js":"24","/Users/adam/Programming/Apps/social/app/src/components/comment/getRepliesQuery.js":"25","/Users/adam/Programming/Apps/social/app/src/home/HomePage.js":"26"},{"size":582,"mtime":1615839554539,"results":"27","hashOfConfig":"28"},{"size":4209,"mtime":1616218944896,"results":"29","hashOfConfig":"28"},{"size":3524,"mtime":1615703460016,"results":"30","hashOfConfig":"28"},{"size":3742,"mtime":1616023680024,"results":"31","hashOfConfig":"28"},{"size":5294,"mtime":1615837511550,"results":"32","hashOfConfig":"28"},{"size":915,"mtime":1615845087487,"results":"33","hashOfConfig":"28"},{"size":1946,"mtime":1615700132742,"results":"34","hashOfConfig":"28"},{"size":1287,"mtime":1616114860396,"results":"35","hashOfConfig":"28"},{"size":480,"mtime":1615836578477,"results":"36","hashOfConfig":"28"},{"size":428,"mtime":1616023795245,"results":"37","hashOfConfig":"28"},{"size":3440,"mtime":1616023436522,"results":"38","hashOfConfig":"28"},{"size":476,"mtime":1615843789413,"results":"39","hashOfConfig":"28"},{"size":476,"mtime":1616112867755,"results":"40","hashOfConfig":"28"},{"size":433,"mtime":1616022412667,"results":"41","hashOfConfig":"28"},{"size":708,"mtime":1616020102004,"results":"42","hashOfConfig":"28"},{"size":3025,"mtime":1616113336260,"results":"43","hashOfConfig":"28"},{"size":3485,"mtime":1616116315732,"results":"44","hashOfConfig":"28"},{"size":374,"mtime":1615844660997,"results":"45","hashOfConfig":"28"},{"size":161,"mtime":1615938627712,"results":"46","hashOfConfig":"28"},{"size":1857,"mtime":1616114157995,"results":"47","hashOfConfig":"28"},{"size":487,"mtime":1615943659864,"results":"48","hashOfConfig":"28"},{"size":804,"mtime":1616023560778,"results":"49","hashOfConfig":"28"},{"size":407,"mtime":1616023873716,"results":"50","hashOfConfig":"28"},{"size":2460,"mtime":1616113219525,"results":"51","hashOfConfig":"28"},{"size":391,"mtime":1616022532067,"results":"52","hashOfConfig":"28"},{"size":73,"mtime":1616114716000,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1o1hb8n",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/adam/Programming/Apps/social/app/src/index.js",[],["113","114"],"/Users/adam/Programming/Apps/social/app/src/components/Navbar.js",[],"/Users/adam/Programming/Apps/social/app/src/login/Login.js",[],"/Users/adam/Programming/Apps/social/app/src/feed/FeedPage.js",["115","116","117","118"],"import { Button, Container, makeStyles, Grid, Box } from \"@material-ui/core\"\nimport { Skeleton } from \"@material-ui/lab\"\nimport Post from \"../components/post/Post\"\nimport CreatePost from \"../components/post/CreatePost\"\nimport { useLazyQuery, useQuery } from \"@apollo/client\"\nimport GET_FEED from \"./getFeedQuery\"\nimport GET_USER from \"./getUserQuery\"\nimport { useEffect, useRef, useState } from \"react\"\nimport PostList from \"../components/post/PostList\"\n\n/**\n * Creates the styling of the feed page.\n */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  error: {\n    margin: theme.spacing(2),\n  },\n  postList: {\n    listStyle: \"none\",\n    padding: \"0\",\n  },\n}))\n\n/**\n * Creates the feed page component and handles the executing of the feed query.\n * @author Adam Rodrigues\n * @returns The feed page component.\n */\nconst FeedPage = () => {\n  /**\n   * The instance of the styling to use.\n   */\n  const classes = useStyles()\n\n  /**\n   * The query hook to fetch the feed.\n   * Temporarily using polling intervals to further investigate why the UI is not updating upon cache updating.\n   */\n  const [getFeed, { loading, data: feedData }] = useLazyQuery(GET_FEED, {\n    onCompleted({ getFeed }) {\n      if (scrollRef != null) {\n        scrollRef.current.scrollIntoView()\n      }\n    },\n  })\n\n  /**\n   * The query hook to fetch the users data.\n   */\n  const { loading: loadingUserData, data: userData } = useQuery(GET_USER, {\n    onError({ error }) {},\n  })\n\n  /**\n   * The offset used for loading more feed.\n   */\n  const [feedOffset, setFeedOffset] = useState(0)\n\n  /**\n   * Used to scroll to bottom on load more feed event.\n   */\n  const scrollRef = useRef(null)\n\n  useEffect(() => {\n    getFeed({ variables: { offset: feedOffset } })\n  }, [feedOffset, getFeed])\n\n  /**\n   * The function is used to return a component of loaded posts.\n   * @returns The loaded posts as a component.\n   */\n  function loadPosts() {\n    return (\n      <div>\n        <PostList posts={feedData.getFeed} />\n        <div style={{ float: \"left\", clear: \"both\" }} ref={scrollRef}></div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setFeedOffset(feedOffset + 1)}\n        >\n          Load more\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <div style={{ paddingLeft: \"4rem\", paddingRight: \"4rem\" }}>\n      <Grid container className={classes.root} spacing={8}>\n        <Grid className={classes.fixedGridItem} item xs={12} md={2}></Grid>\n        <Grid item xs={12} md={8}>\n          {!userData ? (\n            <div>\n              <Box margin={4}>\n                <Skeleton variant=\"circle\" width={40} height={40} />\n                <Skeleton variant=\"rect\" width={410} height={118} />\n              </Box>\n            </div>\n          ) : (\n            <CreatePost user={userData.getUser} />\n          )}\n          {!feedData ? (\n            <div>\n              <div>\n                <Box margin={4}>\n                  <Skeleton variant=\"circle\" width={40} height={40} />\n                  <Skeleton variant=\"rect\" width={410} height={200} />\n                </Box>\n                <Box margin={4}>\n                  <Skeleton variant=\"circle\" width={40} height={40} />\n                  <Skeleton variant=\"rect\" width={410} height={200} />\n                </Box>\n                <Box margin={4}>\n                  <Skeleton variant=\"circle\" width={40} height={40} />\n                  <Skeleton variant=\"rect\" width={410} height={200} />\n                </Box>\n              </div>\n            </div>\n          ) : (\n            loadPosts()\n          )}\n        </Grid>\n        <Grid item xs={12} md={2}></Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default FeedPage\n","/Users/adam/Programming/Apps/social/app/src/register/Register.js",["119","120"],"import {\n  Button,\n  Container,\n  Grid,\n  makeStyles,\n  TextField,\n  Typography,\n} from \"@material-ui/core\"\nimport { Alert } from \"@material-ui/lab\"\nimport { useMutation } from \"@apollo/client\"\nimport REGISTER from \"./registerMutation\"\nimport { useState } from \"react\"\nimport { useHistory } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n/**\n * The styles to use for the Register page.\n */\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(8),\n  },\n  title: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\n/**\n * Represents the Register page.\n * @author Adam Rodrigues\n * @returns The Register component.\n */\nconst Register = () => {\n  /**\n   * The mutation hook used to execute a register mutation.\n   */\n  const [register, { loading, error }] = useMutation(REGISTER, {\n    onCompleted({ register }) {\n      if (register) {\n        setHasRegistered(true)\n      }\n    },\n    onError({ error }) {\n      setHasRegistered(false)\n    },\n  })\n\n  /**\n   * The first name reference stored in state.\n   */\n  const [firstName, setFirstName] = useState(\"\")\n\n  /**\n   * The last name reference stored in state.\n   */\n  const [lastName, setLastName] = useState(\"\")\n\n  /**\n   * The email reference stored in state.\n   */\n  const [email, setEmail] = useState(\"\")\n\n  /**\n   * The password reference stored in state.\n   */\n  const [password, setPassword] = useState(\"\")\n\n  /**\n   * The password repeat reference stored in state.\n   */\n  const [passwordRepeat, setPasswordRepeat] = useState(\"\")\n\n  /**\n   *\n   */\n  const [hasRegistered, setHasRegistered] = useState(false)\n\n  /**\n   * The instance of the styles to use for the register page.\n   */\n  const classes = useStyles()\n\n  /**\n   * The reference to history.\n   */\n  const history = useHistory()\n\n  /**\n   * The method used when the register button is clicked.\n   */\n  function handleRegister() {\n    register({\n      variables: {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password,\n        passwordRepeat: passwordRepeat,\n      },\n    })\n  }\n\n  return (\n    <Container className={classes.container} maxWidth=\"xs\">\n      <Typography className={classes.title} component=\"h1\" variant=\"h5\">\n        Register\n      </Typography>\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"First Name\"\n                  name=\"first-name\"\n                  size=\"small\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Last Name\"\n                  name=\"last-name\"\n                  size=\"small\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  onChange={(e) => setLastName(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  name=\"email\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Password\"\n                  name=\"password\"\n                  size=\"small\"\n                  type=\"password\"\n                  variant=\"outlined\"\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Repeat Password\"\n                  name=\"password-repeat\"\n                  size=\"small\"\n                  type=\"password\"\n                  variant=\"outlined\"\n                  onChange={(e) => setPasswordRepeat(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n              onClick={handleRegister}\n            >\n              Register\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            {hasRegistered ? (\n              <Alert severity=\"success\">\n                You have successfully registered - good job! You can login by\n                clicking <Link to=\"/login\">here</Link>\n              </Alert>\n            ) : (\n              \"\"\n            )}\n            {error ? (\n              <Alert severity=\"error\">\n                {error.graphQLErrors.map(({ message }) => {\n                  return <span>{message}</span>\n                })}\n                {error.networkError\n                  ? \"Sorry, we are uanble to complete the request at this time.\"\n                  : \"\"}\n              </Alert>\n            ) : (\n              \"\"\n            )}\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  )\n}\n\nexport default Register\n","/Users/adam/Programming/Apps/social/app/src/apollo.js",[],"/Users/adam/Programming/Apps/social/app/src/utils/authentication.js",[],"/Users/adam/Programming/Apps/social/app/src/components/App.js",["121","122","123"],"import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport Navbar from \"./Navbar\"\nimport Login from \"../login/Login\"\nimport FeedPage from \"../feed/FeedPage\"\nimport Register from \"../register/Register\"\nimport ProfilePage from \"../profile/ProfilePage\"\nimport HomePage from \"../home/HomePage\"\nimport { PrivateRoute, PublicRoute } from \"../utils/authentication.js\"\nimport { Home } from \"@material-ui/icons\"\n\n/**\n * Creates the App component.\n * @returns The app component.\n */\nfunction App() {\n  return (\n    <Router>\n      <header>\n        <Navbar />\n      </header>\n      <div className=\"root\">\n        <Switch>\n          <PublicRoute\n            restricted={true}\n            component={Register}\n            path=\"/register\"\n            exact\n          />\n          <PublicRoute\n            restricted={true}\n            component={Login}\n            path=\"/login\"\n            exact\n          />\n          <PublicRoute\n            restricted={false}\n            component={HomePage}\n            path=\"/\"\n            exact\n          ></PublicRoute>\n          <PrivateRoute component={FeedPage} path=\"/feed\" exact />\n          <PrivateRoute component={ProfilePage} path=\"/profile\" exact />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","/Users/adam/Programming/Apps/social/app/src/register/registerMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/feed/getFeedQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/Post.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/toggleLikeMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/addCommentMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/getCommentsQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/Comments.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/Comment.js",["124","125","126"],"import { useLazyQuery, useQuery } from \"@apollo/client\"\nimport {\n  Card,\n  CardActions,\n  CardHeader,\n  Avatar,\n  CardContent,\n  makeStyles,\n  Box,\n  Button,\n  CardActionArea,\n} from \"@material-ui/core\"\nimport { useEffect, useState } from \"react\"\nimport AddComment from \"./AddComment\"\nimport GET_REPLIES from \"./getRepliesQuery\"\n\n/**\n * Represents the styling of a Comment.\n */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n  },\n}))\n\n/**\n * Represents a comment under a Post.\n * @param {*} props The props passed.\n * @returns The component Comment.\n */\nconst Comment = (props) => {\n  /**\n   * The instance of the styles to use.\n   */\n  const classes = useStyles()\n\n  /**\n   * The repy toggle.\n   */\n  const [replyToggle, setReplyToggle] = useState(false)\n\n  /**\n   * The query hook used to retrieve the replies.\n   */\n  const { data } = useQuery(GET_REPLIES, {\n    pollInterval: 100,\n    variables: { commentId: parseInt(props.id) },\n  })\n\n  /**\n   * Loads the comment replies.\n   *\n  useEffect(() => {\n    replyComments({ variables: { commentId: parseInt(props.id) } })\n  }, [])*/\n\n  /**\n   * Handles the replies being toggled.\n   */\n  function handleReplyToggle() {\n    setReplyToggle(!replyToggle)\n  }\n\n  /**\n   * The styling to aplly for a reply.\n   */\n  let replyToStyle = {\n    margin: \"2rem\",\n  }\n\n  return (\n    <div className={classes.root}>\n      <Card variant=\"outlined\" style={props.replyTo ? replyToStyle : {}}>\n        <CardHeader\n          title={props.commenter}\n          className={classes.cardHeader}\n          avatar={\n            <Avatar src=\"https://material-ui.com/static/images/avatar/1.jpg\"></Avatar>\n          }\n        ></CardHeader>\n        <CardContent>\n          <Box component=\"span\" fontWeight={500}>\n            {props.commenter}\n          </Box>\n          <p>{props.comment}</p>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" onClick={handleReplyToggle}>\n            Reply\n          </Button>\n          <Button size=\"small\">Like ({props.likes})</Button>\n        </CardActions>\n        {replyToggle ? (\n          <AddComment\n            postId={props.postId}\n            replyCommentId={props.id}\n          ></AddComment>\n        ) : (\n          \"\"\n        )}\n\n        <div className=\"replies\">\n          {data && data.getReplies\n            ? data.getReplies.map((reply) => {\n                return (\n                  <div>\n                    <Comment\n                      id={reply.id}\n                      postId={reply.post.id}\n                      commenter={\n                        reply.user.firstName + \" \" + reply.user.lastName\n                      }\n                      comment={reply.comment}\n                      likes={reply.likesCount}\n                      replyTo={true}\n                      replies={reply.replies}\n                    ></Comment>\n                  </div>\n                )\n              })\n            : \"\"}\n        </div>\n      </Card>\n    </div>\n  )\n}\n\nexport default Comment\n","/Users/adam/Programming/Apps/social/app/src/components/post/CreatePost.js",["127","128"],"import {\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  TextField,\n  Avatar,\n  CardHeader,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { useState } from \"react\"\nimport { gql, useMutation } from \"@apollo/client\"\nimport client from \"../../apollo\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport GET_FEED from \"../../feed/getFeedQuery.js\"\nimport CREATE_POST from \"./createPostMutation.js\"\nimport GET_PROFILE_POSTS from \"../profile/getProfilePosts.js\"\n\n/**\n * Represents the styling of the Create Post component.\n */\nconst useStyles = makeStyles((theme) => ({\n  cardContent: {\n    margin: 0,\n  },\n  cardHeader: {\n    padding: theme.spacing(2),\n  },\n}))\n\n/**\n * The component of creating a post. Handles the execution of the mutation against the graphql server.\n * @author Adam Rodrigues\n * @returns The component of creating a post.\n */\nconst CreatePost = (props) => {\n  /**\n   * The classes to style with.\n   */\n  const classes = useStyles()\n\n  /**\n   * The create post use mutation hook.\n   */\n  const [createPost, { error }] = useMutation(CREATE_POST, {\n    refetchQueries: [\n      { query: GET_FEED, variables: { offset: 0 } },\n      { query: GET_PROFILE_POSTS, variables: { offset: 0 } },\n    ],\n    onError({ error }) {},\n    update(cache, { data: { createPost } }) {\n      cache.modify({\n        id: cache.identify(\"Post:\" + createPost.id),\n        fields: {\n          post(exisistingPost = [], { readField }) {\n            const newPostRef = cache.writeFragment({\n              data: createPost,\n              fragment: gql`\n                fragment NewPost on Post {\n                  id\n                  post\n                  user {\n                    id\n                    firstName\n                    lastName\n                  }\n                }\n              `,\n            })\n            return [...exisistingPost, newPostRef]\n          },\n        },\n      })\n    },\n  })\n\n  /**\n   * The typed post value in state.\n   */\n  const [post, setPost] = useState(\"\")\n\n  /**\n   * The interaction when creating a post.\n   */\n  function handlePost() {\n    createPost({\n      variables: { post: post },\n    })\n    setPost(\"\")\n  }\n\n  return (\n    <div>\n      <Card>\n        <CardHeader\n          title={props.user.firstName + \" \" + props.user.lastName}\n          className={classes.cardHeader}\n          avatar={\n            <Avatar src=\"https://avatars.githubusercontent.com/u/36482887?s=460&u=4babd11bd036d847b91f98c500e652c2ce55e329&v=4\"></Avatar>\n          }\n        ></CardHeader>\n        <CardContent className={classes.cardContent}>\n          <TextField\n            multiline\n            rows={2}\n            rowsMax={12}\n            fullWidth\n            helperText={\"What's on your mind?\"}\n            value={post}\n            onChange={(e) => setPost(e.target.value)}\n          />\n        </CardContent>\n        <CardActions>\n          <Button variant=\"contained\" color=\"primary\" onClick={handlePost}>\n            Post\n          </Button>\n          {error ? (\n            <Alert severity=\"error\">\n              {error.graphQLErrors.map(({ message }) => {\n                return <span>{message}</span>\n              })}\n              {error.networkError\n                ? \"Sorry, we are having some issues contacting the network.\"\n                : console.log(JSON.stringify(error.networkError))}\n            </Alert>\n          ) : (\n            \"\"\n          )}\n        </CardActions>\n      </Card>\n    </div>\n  )\n}\n\nexport default CreatePost\n","/Users/adam/Programming/Apps/social/app/src/components/post/createPostMutation.js",[],"/Users/adam/Programming/Apps/social/app/src/feed/getUserQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/profile/ProfilePage.js",[],"/Users/adam/Programming/Apps/social/app/src/components/profile/ProfilePosts.js",[],"/Users/adam/Programming/Apps/social/app/src/components/post/PostList.js",[],"/Users/adam/Programming/Apps/social/app/src/components/profile/getProfilePosts.js",[],"/Users/adam/Programming/Apps/social/app/src/components/comment/AddComment.js",["129"],"import { Button, CardActions, TextField } from \"@material-ui/core\"\nimport { useState } from \"react\"\nimport { useMutation } from \"@apollo/client\"\nimport { makeStyles } from \"@material-ui/core\"\nimport ADD_COMMENT from \"../comment/addCommentMutation\"\nimport GET_COMMENTS from \"../comment/getCommentsQuery\"\nimport GET_REPLIES from \"./getRepliesQuery\"\n\n/**\n * The styling of a post.\n */\nconst useStyles = makeStyles((theme) => ({\n  postComment: {\n    marginTop: theme.spacing(2),\n  },\n  commentArea: {\n    display: \"block\",\n  },\n}))\n\n/**\n * Represents the \"Add Comment\" area of the UI.\n * @param {*} props The props to pass.\n * @returns The AddComment component.\n */\nconst AddComment = (props) => {\n  /**\n   * Represents the instance of the classes for styling.\n   */\n  const classes = useStyles()\n\n  /**\n   * Represemts the comment value if responding to a post.\n   */\n  const [comment, setComment] = useState(\"\")\n\n  /**\n   * Represents the mutation hook for executing an add comment mutation.\n   */\n  const [addComment] = useMutation(ADD_COMMENT, {\n    refetchQueries: [\n      { query: GET_COMMENTS, variables: { postId: parseInt(props.postId) } },\n      /*\n      //TODO: conditionally fetch this...\n         {\n        query: GET_REPLIES,\n        variables: { commentId: parseInt(props.replyCommentId) },\n      },*/\n    ],\n    onError({ error }) {\n      console.log(\"Error=\" + JSON.stringify(error))\n    },\n  })\n\n  /**\n   * The method used when the add comment button is cllicked.\n   * @param {*} event\n   */\n  const handleAddComment = (event) => {\n    addComment({\n      variables: {\n        comment: comment,\n        postId: parseInt(props.postId),\n        replyCommentId: parseInt(props.replyCommentId),\n      },\n    })\n    setComment(\"\")\n  }\n\n  /**\n   * The method used to handle the change of input for typing a comment.\n   * @param {*} event The event executed.\n   */\n  const handleCommentChange = (event) => {\n    setComment(event.target.value)\n  }\n\n  return (\n    <CardActions className={classes.commentArea}>\n      <TextField\n        fullWidth\n        value={comment}\n        label=\"Add a comment\"\n        name=\"comment\"\n        size=\"small\"\n        variant=\"outlined\"\n        onChange={handleCommentChange}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.postComment}\n        onClick={handleAddComment}\n      >\n        Add Comment\n      </Button>\n    </CardActions>\n  )\n}\n\nexport default AddComment\n","/Users/adam/Programming/Apps/social/app/src/components/comment/getRepliesQuery.js",[],"/Users/adam/Programming/Apps/social/app/src/home/HomePage.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":18,"nodeType":"136","messageId":"137","endLine":1,"endColumn":27},{"ruleId":"134","severity":1,"message":"138","line":3,"column":8,"nodeType":"136","messageId":"137","endLine":3,"endColumn":12},{"ruleId":"134","severity":1,"message":"139","line":42,"column":21,"nodeType":"136","messageId":"137","endLine":42,"endColumn":28},{"ruleId":"134","severity":1,"message":"140","line":53,"column":20,"nodeType":"136","messageId":"137","endLine":53,"endColumn":35},{"ruleId":"134","severity":1,"message":"139","line":37,"column":22,"nodeType":"136","messageId":"137","endLine":37,"endColumn":29},{"ruleId":"134","severity":1,"message":"141","line":86,"column":9,"nodeType":"136","messageId":"137","endLine":86,"endColumn":16},{"ruleId":"134","severity":1,"message":"142","line":1,"column":43,"nodeType":"136","messageId":"137","endLine":1,"endColumn":48},{"ruleId":"134","severity":1,"message":"143","line":1,"column":50,"nodeType":"136","messageId":"137","endLine":1,"endColumn":54},{"ruleId":"134","severity":1,"message":"144","line":9,"column":10,"nodeType":"136","messageId":"137","endLine":9,"endColumn":14},{"ruleId":"134","severity":1,"message":"145","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":22},{"ruleId":"134","severity":1,"message":"146","line":11,"column":3,"nodeType":"136","messageId":"137","endLine":11,"endColumn":17},{"ruleId":"134","severity":1,"message":"147","line":13,"column":10,"nodeType":"136","messageId":"137","endLine":13,"endColumn":19},{"ruleId":"134","severity":1,"message":"146","line":4,"column":3,"nodeType":"136","messageId":"137","endLine":4,"endColumn":17},{"ruleId":"134","severity":1,"message":"148","line":14,"column":8,"nodeType":"136","messageId":"137","endLine":14,"endColumn":14},{"ruleId":"134","severity":1,"message":"149","line":7,"column":8,"nodeType":"136","messageId":"137","endLine":7,"endColumn":19},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Post' is defined but never used.","'loading' is assigned a value but never used.","'loadingUserData' is assigned a value but never used.","'history' is assigned a value but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Home' is defined but never used.","'useLazyQuery' is defined but never used.","'CardActionArea' is defined but never used.","'useEffect' is defined but never used.","'client' is defined but never used.","'GET_REPLIES' is defined but never used.","no-global-assign","no-unsafe-negation"]